#!/bin/bash

PARAMS=""

# Validate that terraform is installed
validate_terraform () {
  echo "Validating terraform is installed..."
  if terraform -v; then
    echo "  terraform is INSTALLED."
  else
    echo "  terraform is NOT INSTALLED."
    echo "  Please install the terraform command line tools first..."
    echo "  These can be found at https://www.terraform.io/downloads.html"
    return 1
  fi
}

# Validate that gsutil is installed
validate_gsutil () {
  echo "Validating gsutil is installed..."
  if gsutil -v; then
    echo "  gsutil is INSTALLED."
  else
    echo "  gsutil is NOT INSTALLED."
    echo "  Please install the Google Cloud SDK first..."
    echo "  See https://cloud.google.com/sdk/docs/quickstart for downloads and instructions"
    return 1
  fi
}

# Validate that the GitHub CLI is installed
validate_github () {
  echo "Validating GitHub CLI is installed..."
  if gh --version; then
    echo "  GitHub CLI is INSTALLED."
  else
    echo "  GitHub CLI is NOT INSTALLED."
    echo "  Please install the GitHub command line tools first..."
    return 1
  fi
}

github_remove_public_ssh_key () {

  echo "Removing ssh keys from GitHub currently not supported with the CLI..."

}

while (( "$#" )); do
    case "$1" in
        -c|--cloud)
            if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
                CLOUD_ARG=$2
                shift 2
            else
                echo "Error: Argument for $1 is missing" >&2
                exit 1
            fi
            ;;
        -*) # Unsupported flags
            echo "Error: Unsupported flag $1" >&2
            exit 1
            ;;
        *) # Preserve positional arguments
            PARAMS="$PARAMS $1"
            shift
            ;;
    esac
done

case "$CLOUD_ARG" in
    aws)
        echo "AWS selected..."
        # NOT IMPLEMENTED YET
        ;;
    gcp)
        echo "GCP selected..."
        echo "Validating tools installation..."

        # Please note that the tool checks below use a function invocation pattern
        #   that looks like 'function || { statement; }'.  This notation may look unusual,
        #   but it simply means that the statement block will be executed if the function
        #   call returns a non-zero value.  This is done intentionally rather than hard-coding
        #   exit calls within the functions to provide flexibility in the event that future
        #   use cases may wish to check tool installation without aborting the script execution.
        #   For example, for optional tools installations based on cli flags.

        # Validate that gsutil is installed
        validate_gsutil || { exit $?; }

        # Validate that terraform is installed
        validate_terraform || { exit $?; }

        # Validate that GitHub CLI is installed
        validate_github || { exit $?; }

        # Execute cleanup commands within GCP folder
        cd "$CLOUD_ARG"

        # Extract the gitops run number (this was generated by the bootstrap script)
        GITOPS_RUN_NUM=$(grep -oP 'tf_state_bucket[[:space:]]*=[[:space:]]*"[a-zA-z0-9-]+"' terraform.tfvars \
          | head -1 | cut -d'=' -f2 | tr -d ' ' | tr -d '"' | awk -F"-" '{print $NF}')

        # Destroy all environments (dev,qa,prod)
        for env in dev qa  prod
        do
            cd ./environments/$env
            # If there is already local terraform state directory, delete it
            if [ -d ./.terraform ]; then
              rm -rf ./.terraform
            fi
            terraform init
            terraform destroy -auto-approve
            gcloud secrets delete "argocd-github-ssh-private-key-$env" --quiet
            gcloud secrets delete "argocd-admin-password-$env" --quiet
            github_remove_public_ssh_key "$env"
            cd ../../
        done

        # If there is already local terraform state directory, delete it
        if [ -d ./.terraform ]; then
          rm -rf ./.terraform
        fi

        # Destroy base terraform resources (triggers, service accounts, etc)
        terraform init
        terraform destroy -auto-approve

        # Empty and delete tfstate bucket
        gsutil -m rm -r "gs://caylent-gitops-tfstate-$GITOPS_RUN_NUM"
        cd ..

        ;;
    *)
        echo "---------------------"
        echo "No cloud selected..."
        echo "Please specify (aws|gcp) using the -c or --cloud flag"
        echo "For example: ./bootstrap.sh -c gcp"
        exit 1
        ;;
esac
